{"version":3,"sources":["components/AddField.js","components/TodoItem.js","components/TodoList.js","components/TodoTable.js","App.js","serviceWorker.js","index.js"],"names":["AddField","handleOnItemAdded","_this","props","onItemAdded","handleOnItemChange","onItemChange","_this2","this","react_default","a","createElement","onChange","event","target","value","type","placeholder","onClick","Component","TodoItem","_ref","todoTask","className","TodoList","todos","map","item","components_TodoItem","key","id","task","TodoTable","state","newTodo","handleItemChange","text","setState","length","concat","Object","toConsumableArray","AddField_AddField","TodoList_TodoList","App","TodoTable_TodoTable","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kNAEqBA,mNACpBC,kBAAoBC,EAAKC,MAAMC,cAC/BC,mBAAqBH,EAAKC,MAAMG,qFAEtB,IAAAC,EAAAC,KACP,OACDC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,SACCC,SAAU,SAACC,GACVN,EAAKF,mBAAmBQ,EAAMC,OAAOC,QAEtCC,KAAK,OACLC,YAAY,gBAGbR,EAAAC,EAAAC,cAAA,UACCO,QAAS,WACTX,EAAKN,sBAFN,oBAfkCkB,cCUvBC,EATE,SAAAC,GAAgB,IAAdC,EAAcD,EAAdC,SACjB,OACEb,EAAAC,EAAAC,cAAA,OAAKY,UAAU,kBACbd,EAAAC,EAAAC,cAAA,SAAOK,KAAK,aACZP,EAAAC,EAAAC,cAAA,cAAMW,EAAN,OCJeE,mLAEnB,IAAMC,EAAQjB,KAAKL,MAAMsB,MAEvB,OACIhB,EAAAC,EAAAC,cAAA,UACGc,EAAMC,IAAI,SAAAC,GACf,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,CAAUC,IAAKF,EAAKG,GAAIR,SAAUK,EAAKI,iBAPdZ,aCEjBa,6MACpBC,MAAQ,CACPR,MAAO,CACN,CAAEK,GAAI,EAAGC,KAAM,iBACf,CAAED,GAAI,EAAGC,KAAM,mBAEhBG,QAAS,MAGVC,iBAAmB,SAACC,GACnBlC,EAAKmC,SAAU,CACdH,QAASE,OAIXnC,kBAAoB,WACnBC,EAAKmC,SAAS,SAAAhB,GAAwB,IAArBI,EAAqBJ,EAArBI,MAAOS,EAAcb,EAAda,QAMvB,MAAO,CACNT,MAAK,CANQ,CACbK,GAAIL,EAAMa,OAAS,EACnBP,KAAMG,IAIDK,OAAAC,OAAAC,EAAA,EAAAD,CAAgBf,IACrBS,QAAS,+EAKF,IACDT,EAAUjB,KAAKyB,MAAfR,MAEN,OACDhB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAC+B,EAAD,CACCtC,YAAaI,KAAKP,kBAClBK,aAAcE,KAAK2B,mBAEpB1B,EAAAC,EAAAC,cAACgC,EAAD,CAAUlB,MAAOA,YAvCkBN,aCQxByB,mLARX,OACEnC,EAAAC,EAAAC,cAAA,OAAKY,UAAU,OACbd,EAAAC,EAAAC,cAACkC,EAAD,cAJU1B,aCSE2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cff4ff8b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class AddField extends Component {\n\thandleOnItemAdded = this.props.onItemAdded;\n\thandleOnItemChange = this.props.onItemChange;\n\n  render() {\n    return (\n\t\t\t<div>\n\t\t\t\t<input \n\t\t\t\t\tonChange={(event) => {\n\t\t\t\t\t\tthis.handleOnItemChange(event.target.value)\n\t\t\t\t\t}}\n\t\t\t\t\ttype=\"text\" \n\t\t\t\t\tplaceholder=\"Add task...\"\n\t\t\t\t>\n\t\t\t\t</input>\n\t\t\t\t<button\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\tthis.handleOnItemAdded()\n\t\t\t\t\t}}\n\t\t\t\t> \n\t\t\t\t\tAdd Task \n\t\t\t\t</button>\n\t\t\t</div>\n    )\n  }\n}","import React from 'react';\nimport '../App.css';\n\nconst TodoItem = ({todoTask}) => {\n  return (\n    <div className=\"App__todo-item\">\n      <input type=\"checkbox\"></input>\n      <li> {todoTask} </li>\n    </div>\n  )\n}\n\nexport default TodoItem;\n\n","import React, { Component } from 'react';\nimport TodoItem from './TodoItem'\n\nexport default class TodoList extends Component {\n  render() {\n\t\tconst todos = this.props.todos;\n\t\t\n    return (\n        <ul>\n          {todos.map(item => {\n\t\t\t\t\t\treturn <TodoItem key={item.id} todoTask={item.task}/>\n\t\t\t\t\t})}\n        </ul>\n    )\n  }\n}","import React, { Component } from 'react';\nimport '../App.css';\nimport AddField from './AddField';\nimport TodoList from './TodoList'\n\nexport default class TodoTable extends Component {\n\tstate = {\n\t\ttodos: [\n\t\t\t{ id: 0, task: 'Buy groceries' },\n\t\t\t{ id: 1, task: 'Take out trash' } \n\t\t],\n\t\tnewTodo: ''\n\t}\n\n\thandleItemChange = (text) => {\n\t\tthis.setState( {\n\t\t\tnewTodo: text,\n\t\t})\n\t}\n\n\thandleOnItemAdded = () => {\n\t\tthis.setState(({ todos, newTodo }) => {\n\t\t\tlet newItem = {\n\t\t\t\tid: todos.length + 1,\n\t\t\t\ttask: newTodo,\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttodos: [ newItem, ...todos],\n\t\t\t\tnewTodo: '',\n\t\t\t}\n\t\t})\n\t}\n\n  render() {\n\t\tconst { todos } = this.state;\n\n    return (\n\t\t\t<div>\n\t\t\t\t<h1>TodoTable</h1>\n\t\t\t\t<AddField \n\t\t\t\t\tonItemAdded={this.handleOnItemAdded}\n\t\t\t\t\tonItemChange={this.handleItemChange}\n\t\t\t\t/>\n\t\t\t\t<TodoList todos={todos}/>\n\t\t\t</div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport TodoTable from './components/TodoTable';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TodoTable /> \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}